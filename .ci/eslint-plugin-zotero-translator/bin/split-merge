#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const argv = require('minimist')(process.argv.slice(2));

if (argv.merge && argv.split) throw new Error('Cannot both split and merge');
if (!argv.merge && !argv.split) throw new Error('Should I split or should I merge?');

if (!fs.existsSync('lint')) fs.mkdirSync('lint')

for (const translator of argv._) {
  if (!translator.endsWith('.js')) throw new Error(`${translator} is not a .js file`);
  const code = {
    file: path.join(path.dirname(translator), 'lint', path.basename(translator)),
  };
  const header = {
    file: path.join(path.dirname(translator), 'lint', path.basename(translator) + 'on')
  }

  if (argv.split) {
    code.data = fs.readFileSync(translator, 'utf-8')

    if (code.data[0] !== '{') throw new Error(`${translator} might already be split?`)

    code.data = code.data.replace(/[\S\s]*?\n}\n/, h => {
      header.data = h
      return ''
    })

    if (!header) throw new Error(`${translator} does not have a header`)

    fs.writeFileSync(code.file, code.data, 'utf-8');
    fs.writeFileSync(header.file, header.data, 'utf-8');

  } else {

    if (!fs.existsSync(code.file)) throw new Error(`${code.file} not found`)
    code.data = fs.readFileSync(code.file, 'utf-8')

    if (!fs.existsSync(header.file)) throw new Error(`${header.file} not found`)
    header.data = fs.readFileSync(header.file, 'utf-8')

    if (code.data[0] === '{') throw new Error(`${translator} might already be merged?`)

    fs.writeFileSync(translator, header.data + code.data, 'utf-8');
  }
}
